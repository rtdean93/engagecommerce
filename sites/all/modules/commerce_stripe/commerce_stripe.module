<?php

/**
 * @file
 * This module provides Stripe (http://stripe.com/) payment gateway integration
 * to Commerce. Commerce Stripe offers a PCI-compliant way to process payments
 * straight from you Commerce shop.
 */

define('STRIPE_PUBLIC_KEY', '');
define('STRIPE_SECRET_KEY', '');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_stripe_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_stripe'] = array(
    'title' => t('Stripe'),
    'description' => t('Stripe payment gateway'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => FALSE,
    'callbacks' => array(
      'settings_form' => 'commerce_stripe_settings_form',
    ),
  );

  return $payment_methods;
}

/**
 * Payment method settings form.
 *
 * @param $settings
 *   Default settings provided from rules
 *
 * @return array
 *   Settings form array
 */
function commerce_stripe_settings_form($settings) {
  $form = array();
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#description' => t('Secret API Key. Get your key from https://stripe.com/'),
    '#default_value' => !empty($settings['secret_key']) ? $settings['secret_key'] : STRIPE_SECRET_KEY,
  );
  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Publishable Key'),
    '#description' => t('Publishable API Key. Get your key from https://stripe.com/'),
    '#default_value' => !empty($settings['public_key']) ? $settings['public_key'] : STRIPE_PUBLIC_KEY,
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_stripe_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $form = commerce_payment_credit_card_form(
    array(
      'number' => '',
      'exp_month' => '',
      'exp_year' => '',
      'code' => '',
    )
  );

  // Add the total amount.
  $form['total'] = array(
    '#type' => 'hidden',
    '#value' => field_get_items('commerce_order', $order, 'commerce_order_total_amount'),
    '#attributes' => array(
      'name' => '',
      'class' => array('stripe-order-total'),
    ),
  );

  // Set our key to settings array.
  drupal_add_js(array('stripe' => array('publicKey' => $payment_method['settings']['public_key'])), 'setting');

  // Include the stripe.js from stripe.com.
  drupal_add_js('https://js.stripe.com/v1/', 'external');

  // Load commerce_stripe.js.
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'commerce_stripe') . '/commerce_stripe.js',
  );

  // To display validation errors.
  $form['errors'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="payment-errors"></div>',
  );

  return $form;
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_stripe_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  // Require needed Stripe library.
  require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

  // Set stripe secret key.
  Stripe::setApiKey($payment_method['settings']['secret_key']);

  // Assemble charge parameters. Only 'usd' is supported.
  $c = array(
    'amount' => $charge['amount'],
    'currency' => 'usd',
    'card' => $_POST['stripeToken'],
    'description' => t('Order Number: @order_number', array('@order_number' => $order->order_number)),
  );

  // Prepare a transaction object to represent the transaction attempt.
  $transaction = commerce_payment_transaction_new('commerce_stripe', $order->order_id);

  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];

  try {
    $response = Stripe_Charge::create($c);

    $transaction->remote_id = $response->id;
    $transaction->payload[REQUEST_TIME] = $response;
    $transaction->message = t('Payment completed successfully.');
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

    // Save the transaction information.
    commerce_payment_transaction_save($transaction);
  }
  catch (Exception $e) {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    drupal_set_message(check_plain($e->getMessage()), 'error');
    watchdog('commerce_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()), WATCHDOG_NOTICE);

    $transaction->remote_id = $e->getHttpStatus();
    $transaction->payload[REQUEST_TIME] = $e;
    $transaction->message = t('Card processing error: @stripe_error', array('@stripe_error' => $e->getMessage()));
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    commerce_payment_transaction_save($transaction);

    return FALSE;
  }
}
